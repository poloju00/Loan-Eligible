# -*- coding: utf-8 -*-
"""loan app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lwaXKb4grmGnzraNMdJwRygjvwejl57Q
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from xgboost import XGBClassifier
import joblib

# -------------- Load your trained model and preprocessors ----------------
# For demo, I'm going to simulate loading objects saved with joblib.
# You need to save these after training your model.

# Uncomment and use after you save these files:
# best_xgb = joblib.load("best_xgb_model.joblib")
# scaler = joblib.load("scaler.joblib")
# encoders = joblib.load("encoders.joblib")

# For demo, we define empty placeholders (replace these with actual loaded objects)
best_xgb = None
scaler = None
encoders = {}

# List of categorical columns (must match your training data)
cat_cols = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area']

# -------------- Prediction function ----------------

def predict_loans_batch(applicants_df, model, scaler, encoders, cat_cols):
    df_input = applicants_df.copy()
    for col in cat_cols:
        if col in df_input.columns:
            le = encoders[col]
            unseen = set(df_input[col].unique()) - set(le.classes_)
            if unseen:
                raise ValueError(f"Unseen categories in column '{col}': {unseen}")
            df_input[col] = le.transform(df_input[col])
    X_input_scaled = scaler.transform(df_input)
    preds = model.predict(X_input_scaled)
    return pd.Series(np.where(preds == 1, "Approved", "Not Approved"))

# -------------- Streamlit UI ----------------

st.title("Loan Eligibility Prediction Web App")

st.write("""
Enter the details of applicants below. You can enter multiple applicants at once.
Upload a CSV file with columns:
`Gender, Married, Dependents, Education, Self_Employed, ApplicantIncome, CoapplicantIncome, LoanAmount, Loan_Amount_Term, Credit_History, Property_Area`
""")

uploaded_file = st.file_uploader("Upload CSV file with applicant data", type=["csv"])

if uploaded_file is not None:
    try:
        applicants_df = pd.read_csv(uploaded_file)

        # Check required columns
        required_cols = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed',
                         'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',
                         'Loan_Amount_Term', 'Credit_History', 'Property_Area']

        if not all(col in applicants_df.columns for col in required_cols):
            st.error(f"Missing required columns. Make sure your CSV contains: {required_cols}")
        else:
            # Show preview of data
            st.write("Preview of uploaded data:")
            st.dataframe(applicants_df.head())

            if st.button("Predict Loan Eligibility"):
                try:
                    results = predict_loans_batch(applicants_df, best_xgb, scaler, encoders, cat_cols)
                    applicants_df['Loan_Status_Prediction'] = results
                    st.write("Prediction Results:")
                    st.dataframe(applicants_df)
                except Exception as e:
                    st.error(f"Error during prediction: {e}")
    except Exception as e:
        st.error(f"Error reading the file: {e}")

else:
    st.info("Please upload a CSV file to get started.")